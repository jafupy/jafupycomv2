---
export const prerender = false;

import Layout from "$/layouts/article.astro";
import { ChevronLeft } from "lucide-astro";

import type { SanityDocument } from "@sanity/client";
import { sanityClient } from "sanity:client";
import imageUrlBuilder from "@sanity/image-url";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import { PortableText } from "astro-portabletext";
import type { TransformEffect } from "astro:schema";
import { newToast } from "../../../../toasts.svelte";

const POST_QUERY = `*[_type == "projects" && slug.current == $slug][0]`;
const post = await sanityClient.fetch<SanityDocument>(POST_QUERY, Astro.params);

export async function getStaticPaths(): Promise<{ params: { slug: string } }> {
	const SLUGS_QUERY = `*[_type == "projects" && defined(slug.current)]{
    "params": {"slug": slug.current}
  }`;
	return await sanityClient.fetch(SLUGS_QUERY, Astro.params);
}

const { projectId, dataset } = sanityClient.config();
const urlFor = (source: SanityImageSource) =>
	projectId && dataset ? imageUrlBuilder({ projectId, dataset }).image(source) : null;
const postImageUrl = post.image ? urlFor(post.image)?.width(550).height(310).url() : null;

function calculateReadTime(portableText: unknown, wpm = 200) {
	// Helper function to recursively extract text from Portable Text
	function extractText(blocks) {
		let text = "";

		blocks?.forEach((block) => {
			if (block._type === "block") {
				block.children.forEach((child) => {
					if (child._type === "span") {
						text += child.text + " ";
					}
				});
			}
		});

		return text.trim();
	}

	// Convert Portable Text to plain text
	const plainText = extractText(portableText);

	// Count the words
	const wordCount = plainText.split(/\s+/).length;

	// Calculate the read time in seconds
	let readTimeInSeconds = (wordCount / wpm) * 60;

	// Round to nearest 15 seconds
	readTimeInSeconds = Math.round(readTimeInSeconds / 15) * 15;

	return readTimeInSeconds;
}
---

<Layout>
	<a
		class="fixed left-4 top-20 pr-4 pl-2 py-1 border border-grey-100/10 bg-grey-950/20 rounded-lg not-prose flex justify-center items-center w-fit gap-2 backdrop-blur-md hover:border-grey-100/20 font-sans"
		href="/projects"
		><ChevronLeft class="w-4 h-4 inline" />Go back</a
	>
	<div class="relative">
		{
			postImageUrl && (
				<img
					src={postImageUrl}
					alt={post.title}
					class="aspect-video rounded-xl w-full"
					style="mask-image: linear-gradient(to bottom, white, transparent);"
				/>
			)
		}
		<hgroup class="md:absolute md:bottom-4 md:left-4">
			<h1 class="mb-0 md:text-5xl">{post.title}</h1>
			<p class="mt-2">
				{
					new Date(post.publishedAt)
						.toLocaleDateString(["locale"], {
							year: "numeric",
							month: "short",
							day: "numeric",
						})
						.split(" ")
						.reverse()
						.join(" ")
				}
				<span class="">{" / "}</span>
				{
					calculateReadTime(post.body) > 60
						? `${calculateReadTime(post.body) % 60} min`
						: `${Math.max(calculateReadTime(post.body), 15)} sec`
				} read
			</p>
		</hgroup>
	</div>
	{Array.isArray(post.body) && <PortableText value={post.body} />}
</Layout>
